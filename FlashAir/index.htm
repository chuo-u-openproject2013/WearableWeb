<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Personal AMeDAS</title>
    <script src="js/jquery.js"></script>
    <script src="js/jqplot.js"></script>
    <script src="js/btstrap.js"></script>
    <link href="css/jqplot.css" rel="stylesheet">
    <link href="css/btstrap.css" rel="stylesheet">
    <link href="css/btstrapr.css" rel="stylesheet">
    <style type="text/css">
    @media screen and (min-width: 768px) {
        .hero-unit{
            padding: 10px 60px 10px 160px;
        }
    }
    
    @media screen and (max-width: 767px) {
        .hero-unit{
            padding: 10px 20px 10px 20px;
        }
        .hero-unit h1{
            font-size: 40px;                                                                        
        }
    }
    
    body {
        font-size: 16px;
    }
    
    #recent-time-p {
        text-decoration: underline;
    }
    
    #recent-time {
        color: #0e90d2;
    }
    
    .div-normal {
        border: 1px solid #e5e5e5;
        border-radius: 3px;
        padding: 10px;
        margin-bottom: 20px;
    }
    
    .table{
        font-size: 140%;
    }
    
    #graph {
        height: 200px;
        width: 100%;
    }
    </style>
</head>
<body>
    <div class="navbar">
    <div class="navbar-inner">
        <a class="brand pull-right">Wearable Web</a>
        <ul class="nav">
            <li class="active"><a href="./">Home</a></li>
        </ul>
    </div>
    </div>
    
    <div class="container-fluid">
        
        <div class="hero-unit">
        <h1>Personal AMeDAS</h1>
	</div>
        
        <hr>
            
        <div class="row">
            <div id="message"></div>
            
            <!-- 左カラム -->
            <div class="span8">
                <div class="div-normal">
                   <h2>最新データ</h2>
                   <p id="recent-time-p">最終更新時間: <span id="recent-time"></span></p>
                   <table class="table table-bordered table-hover" id="current-data">
                   </table>
                 </div>
                
                <div class="div-normal">
                    <div id="graph"></div>
                </div>

                <div id="raw"><pre style="height: 200px; overflow-y: scroll"></pre></div>
            </div>

            <!-- 右カラム -->
            <div class="span4">
                <div class="accordion">
                <div class="accordion-group">
                 <div class="accordion-heading">
                     <h4><a class="accordion-toggle" data-toggle="collapse" href="#collapseOne">設定</a></h4>
                 </div>
                 <div id="collapseOne" class="accordion-body collapse in">
                   <div class="accordion-inner">
                     <form id="setting-form">
                         <label class="checkbox">
                             <input type="checkbox" id="auto-reload" checked="checked">自動更新(5秒)
                         </label>
                         <label>グラフ表示範囲:
                            <input type="number" min="1" value="3" style="width: 50px" id="graph-range">分
                         </label>
                         <input type="button" value="更新" class="btn" id="reload">
                     </form>
                   </div>
                 </div>
                </div>
                </div>
            </div>

        </div>
        
    </div>

    <script>
      var sens_unit = ["温度(℃)"];
      
      var graphRange = 3 * 60 * 1000;

    (function(){
        getData();
        
        // 自動更新
        var interval = 10 * 1000;
        setInterval( function(){
            if( $("#auto-reload").prop("checked") === true ) getData();
        }, interval);
        
        // 手動更新
        $("#reload").click( function(){
            var val = $("#graph-range").val();
            if( !isNaN(val) && val > 0){
                graphRange =  val * 60 * 1000;
            }
            getData();
        });
        
    })();

    /* データを取得 */                                                                         
    function getData(){
        var date = getDate();
        var filename = "DAT/" + date["year"] + date["month"] + date["day"] + ".LOG";
        
       jqXHR = $.get(filename);

       jqXHR.done( function(data, status, xhr){
           showData(data);
       });

       jqXHR.fail( function(){
           if( $("#message .alert-error").size() === 0 ){
               $("#message").prepend('<div class="alert alert-error"><a class="close" data-dismiss="alert">×</a>データの読み込みに失敗。時間を空けて再試行してください。</div>');
           }
       });
    };                                                                           
     
     
    /* 取得データを処理 */
    function showData(data){
        // 生データ出力
        var raw = $("#raw > pre");
        raw.text(data);
        raw.scrollTop(raw[0].scrollHeight);
        
        // CSV to Array 
        var data = $.csv()(data);
        // 数値にキャスト
        for(var i = 0; i < data.length; i++){
            for(var j = 1; j < data[i].length; j++){
                data[i][j] = Number(data[i][j]);
            }
        }
        //console.log(data);

        // 最新のデータ抽出
        var recentData = data[data.length - 1];
        var recentTime = recentData[0];
        $("#recent-time").html(recentTime);

        // tableに出力
        if($("#current-data>tbody").length !== recentData.length){
            $("#current-data").html("");
           for(var i = 1; i < recentData.length; i++){
               $("#current-data").append("<tr><td>"+ sens_unit[i - 1] + 
                   "</td><td id=\"sens-"+ i +"\">" + recentData[i] + "</td></tr>");
           }
        }else{
           for(var i = 0; i < recentData.length; i++){
               $("td#sens-" + i).html(recentData[i + 1]);
           }
        }
        
        /* jqPlot */
        // データ系列生成
        var plotData = new Array();
        for(var i = 0; i < data.length; i++){
            while( plotData.length < (data[i].length - 1)){
                plotData.push(new Array());
            }
            for(var j = 1; j < data[i].length; j++){
                plotData[j-1].push([ data[i][0], data[i][j] ]);
            }
        }
        //console.log(plotData);
        // 描画範囲の時間計算
        var today = getDate();
        var recentDate = new Date(today["year"]+"/"+today["month"]+"/"+today["day"]+" "+recentTime);
        var previousDate = new Date(recentDate.getTime() - graphRange) ;
        // 描画
        $.jqplot(
            'graph',
            plotData,
            {
                axes:{
                    xaxis:{
                        renderer: jQuery.jqplot.DateAxisRenderer,
                        tickInterval: '1 minutes',
                        min: previousDate,
                        max: recentDate,
                        tickOptions: {
                            formatString: '%H:%M'
                        }
                    }
                }
            }
        ).replot();
    }

    /* 日付取得 */
    function getDate(){
        var now = new Date();
        var year = now.getYear();
        var month = now.getMonth() + 1;
        var day = now.getDate();
        if (year < 2000) { year += 1900; }
        if (month < 10)  { month = "0" + month; }
        if (day   < 10)  { day   = "0" + day; }

        return {"year": year, "month": month, "day": day};
    }
    </script>
</body>
</html>

